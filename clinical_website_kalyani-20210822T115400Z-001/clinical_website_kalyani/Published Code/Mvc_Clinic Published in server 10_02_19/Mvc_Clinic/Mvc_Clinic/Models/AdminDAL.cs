using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Data.SqlClient;
using System.Configuration;
using System.Data;
using System.Net.Mail;
using System.Net;
using System.IO;

namespace Mvc_Clinic.Models
{
    public class AdminDAL : Mvc_Clinic.Models.IAdminDAL
    {
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["Constr"].ToString());

        public string addAdmin(AdminModel admin, HttpPostedFileBase img)
        {
            try
            {


                SqlCommand com_addAdmin = new SqlCommand("insert Admins values(@name,@gender,@dob,@email,@iaddress,'AutoGenerated','Active')", con);

                com_addAdmin.Parameters.AddWithValue("@name", admin.adminName);
                com_addAdmin.Parameters.AddWithValue("@gender", admin.adminGender);
                com_addAdmin.Parameters.AddWithValue("@dob", admin.adminDoB);
                com_addAdmin.Parameters.AddWithValue("@email", admin.adminEmailID);
                com_addAdmin.Parameters.AddWithValue("@iaddress", "");


                con.Open();
                com_addAdmin.ExecuteNonQuery();
                string s = "";


                SqlCommand com_getAdminID = new SqlCommand("select @@identity", con);
                admin.adminID = Convert.ToInt32(com_getAdminID.ExecuteScalar());


                if (admin.imageAddress != null)
                {
                    string imageAddress = "/AdminImages/" + admin.adminID.ToString() + Path.GetExtension(img.FileName);
                    SqlCommand com_updateimage = new SqlCommand("update Admins set imageAddress=@i where adminid=@id", con);
                    com_updateimage.Parameters.AddWithValue("@i", imageAddress);
                    com_updateimage.Parameters.AddWithValue("@id", admin.adminID);

                    com_updateimage.ExecuteNonQuery();

                }
                else
                {
                    s = "x";
                }


                string auto_generatedPassword = System.Web.Security.Membership.GeneratePassword(8, 3).ToUpper();

                MembershipCreateStatus status;
                Membership.CreateUser(admin.adminID.ToString(), auto_generatedPassword, "x@x.x", "abc", "abc", true, out status);

                if (status == MembershipCreateStatus.Success)
                {
                    Roles.AddUserToRole(admin.adminID.ToString(), "Admin");
                    //con.Close();
                    string idpass = s + admin.adminID + " " + auto_generatedPassword;

                    return idpass;
                }
                else
                {
                    //con.Close();
                    return null;
                }
            }
            finally
            {
                con.Close();
            }


        }




        public string addDoctors(DoctorModel model)
        {
            try
            {
                string mbl = model.numberForAppointment;
                if (model.alternateNumberForAppointment != null)
                {
                    mbl = model.numberForAppointment + "," + model.alternateNumberForAppointment;
                }

                if (model.LnumberForAppointment == null)
                {
                    model.LnumberForAppointment = "";
                }

                if (model.doctorDesignation == null)
                {
                    model.doctorDesignation = "";
                }


                SqlCommand com_addDoctor = new SqlCommand("insert Doctors values(@name,@designation,@speciality,@degree,@iaddress,'Present',@wtiming,@no,@lno,getdate(),@Aid)", con);

                com_addDoctor.Parameters.AddWithValue("@name", model.doctorName);
                com_addDoctor.Parameters.AddWithValue("@designation", model.doctorDesignation);
                com_addDoctor.Parameters.AddWithValue("@speciality", model.doctorSpeciality);
                // com_addDoctor.Parameters.AddWithValue("@exp", model.doctorExperience);
                com_addDoctor.Parameters.AddWithValue("@degree", model.doctorDegree);
                com_addDoctor.Parameters.AddWithValue("@iaddress", "");
                com_addDoctor.Parameters.AddWithValue("@wtiming", model.workingTiming);
                com_addDoctor.Parameters.AddWithValue("@no", mbl);
                com_addDoctor.Parameters.AddWithValue("@lno", model.LnumberForAppointment);
                com_addDoctor.Parameters.AddWithValue("@Aid", model.ModifierID);
                con.Open();
                com_addDoctor.ExecuteNonQuery();

                //SqlCommand com_getDoctorID = new SqlCommand("select @@identity", con);
                SqlCommand com_getDoctorID = new SqlCommand("select IDENT_CURRENT('Doctors')", con);
                model.doctorID = Convert.ToInt32(com_getDoctorID.ExecuteScalar());

                if (model.imageAddress != "")
                {

                    //string imageAddress = "/DoctorImages/" + model.doctorID.ToString() + Path.GetExtension(img.FileName);

                    SqlCommand com_updateimage = new SqlCommand("update Doctors set imageAddress=@i where doctorID=@id", con);
                    com_updateimage.Parameters.AddWithValue("@i", model.imageAddress);
                    com_updateimage.Parameters.AddWithValue("@id", model.doctorID);

                    if (com_updateimage.ExecuteNonQuery() == 1)
                    {
                        con.Close();
                        return "1_" + model.doctorID;
                    }
                    // con.Close();
                    return "0_" + model.doctorID;
                }
                else
                {
                    return "2_" + model.doctorID;
                }
            }
            finally
            {
                con.Close();
            }
        }






        public SearchDoctorModel searchDoctor(int doctorID)
        {
            try
            {
                SqlCommand com_searchDoc = new SqlCommand("select * from doctors where doctorID=@did", con);
                com_searchDoc.Parameters.AddWithValue("@did", doctorID);

                con.Open();
                SqlDataReader dr = com_searchDoc.ExecuteReader();

                SearchDoctorModel d = new SearchDoctorModel();
                if (dr.Read())
                {
                    d.doctorID = dr.GetInt32(0);
                    d.doctorName = dr.GetString(1);
                    d.doctorDesignation = dr.GetString(2);
                    d.doctorSpeciality = dr.GetString(3);
                    //d.doctorExperience = dr.GetString(4);
                    d.doctorDegree = dr.GetString(4);
                    d.imageAddress = dr.GetString(5);
                    d.doctorStatus = dr.GetString(6);
                    d.workingTiming = dr.GetString(7);
                    d.numberForAppointment = dr.GetString(8);
                    d.LnumberForAppointment = dr.GetString(9);
                    d.LastModifiedDate = dr.GetDateTime(10);
                    d.ModifierID = dr.GetInt32(11);
                }
                //  con.Close();
                if (d.numberForAppointment.ToString().Length > 10)
                {
                    string[] arr = d.numberForAppointment.Split(',');
                    d.numberForAppointment = arr[0];
                    d.alternateNumberForAppointment = arr[1];
                }
                return d;
            }
            finally
            {
                con.Close();
            }

        }




        //public bool addDoctorWorkingDay(DocWorkingTimingModel model)
        //{
        //    string timing = model.workingTime + "" + model.AM_or_PM; 
        //    SqlCommand com_addDocWorking = new SqlCommand("insert DoctorsWorkingTiming values(@did,@wday,@wtime,@no)", con);
        //    com_addDocWorking.Parameters.AddWithValue("@did",model.doctorID);
        //    com_addDocWorking.Parameters.AddWithValue("@wday",model.workingDay);
        //    com_addDocWorking.Parameters.AddWithValue("@wtime",timing);
        //    com_addDocWorking.Parameters.AddWithValue("@no", model.numberForAppointment);

        //    con.Open();
        //    if(com_addDocWorking.ExecuteNonQuery()==1)
        //    {
        //        con.Close();
        //        return true;
        //    }

        //    else
        //    {
        //        con.Close();
        //        return false;
        //    }


        //}



        public bool EditDoctor(SearchDoctorModel model)
        {
            try
            {
                string mbl = model.numberForAppointment;
                if (model.alternateNumberForAppointment != null)
                {
                    mbl = model.numberForAppointment + "," + model.alternateNumberForAppointment;
                }

                if (model.LnumberForAppointment == null)
                {
                    model.LnumberForAppointment = "";
                }
                if (model.doctorDesignation == null)
                {
                    model.doctorDesignation = "";
                }

                if (model.imageAddress != null || model.imageAddress != "")
                {
                    //string imgadd = "/DoctorImages/" + model.doctorID + Path.GetExtension(imageAddress.FileName);



                    SqlCommand com_editDoc = new SqlCommand("Update Doctors set doctorName=@dname, doctorDesignation=@desig, doctorSpeciality=@spcl,  doctorDegree=@deg, imageAddress=@img, doctorStatus=@stat, workingTiming=@tim, numberForAppointment=@no, LnumberForAppointment=@lno, LastModificationDate=getdate(), ModifierID=@Aid where doctorid=@did", con);


                    com_editDoc.Parameters.AddWithValue("@dname", model.doctorName);
                    com_editDoc.Parameters.AddWithValue("@desig", model.doctorDesignation);
                    com_editDoc.Parameters.AddWithValue("@spcl", model.doctorSpeciality);
                    // com_editDoc.Parameters.AddWithValue("@exp", model.doctorExperience);
                    com_editDoc.Parameters.AddWithValue("@deg", model.doctorDegree);
                    com_editDoc.Parameters.AddWithValue("@img", model.imageAddress);
                    com_editDoc.Parameters.AddWithValue("@stat", model.doctorStatus);
                    com_editDoc.Parameters.AddWithValue("@tim", model.workingTiming);
                    com_editDoc.Parameters.AddWithValue("@no", mbl);
                    com_editDoc.Parameters.AddWithValue("@lno", model.LnumberForAppointment);
                    com_editDoc.Parameters.AddWithValue("@did", model.doctorID);
                    com_editDoc.Parameters.AddWithValue("@Aid", model.ModifierID);

                    con.Open();

                    if (com_editDoc.ExecuteNonQuery() == 1)
                    {
                        //  con.Close();
                        return true;
                    }

                    else
                    {
                        //  con.Close();
                        return false;
                    }

                }
                else
                {
                    SqlCommand com_editDoc = new SqlCommand("Update Doctors set doctorName=@dname, doctorDesignation=@desig, doctorSpeciality=@spcl, imageAddress=@img, doctorDegree=@deg, doctorStatus=@stat, workingTiming=@tim, numberForAppointment=@no, LnumberForAppointment=@lno, LastModificationDate=getdate(), ModifierID=@Aid where doctorid=@did", con);


                    com_editDoc.Parameters.AddWithValue("@dname", model.doctorName);
                    com_editDoc.Parameters.AddWithValue("@desig", model.doctorDesignation);
                    com_editDoc.Parameters.AddWithValue("@spcl", model.doctorSpeciality);
                    // com_editDoc.Parameters.AddWithValue("@exp", model.doctorExperience);
                    com_editDoc.Parameters.AddWithValue("@deg", model.doctorDegree);
                    com_editDoc.Parameters.AddWithValue("@img", "");
                    com_editDoc.Parameters.AddWithValue("@stat", model.doctorStatus);
                    com_editDoc.Parameters.AddWithValue("@tim", model.workingTiming);
                    com_editDoc.Parameters.AddWithValue("@no", mbl);
                    com_editDoc.Parameters.AddWithValue("@lno", model.LnumberForAppointment);
                    com_editDoc.Parameters.AddWithValue("@did", model.doctorID);
                    com_editDoc.Parameters.AddWithValue("@Aid", model.ModifierID);

                    con.Open();

                    if (com_editDoc.ExecuteNonQuery() == 1)
                    {
                        // con.Close();
                        return true;
                    }

                    else
                    {
                        /// con.Close();
                        return false;
                    }

                }
            }
            finally
            {
                con.Close();
            }
        }



        public AdminModel searchAdmin(int adminID)
        {
            try
            {
                SqlCommand com_searchAdmin = new SqlCommand("select * from Admins where adminid=@aid", con);
                com_searchAdmin.Parameters.AddWithValue("@aid", adminID);

                con.Open();
                SqlDataReader dr = com_searchAdmin.ExecuteReader();

                AdminModel ad = new AdminModel();
                if (dr.Read())
                {
                    ad.adminID = dr.GetInt32(0);
                    ad.adminName = dr.GetString(1);
                    ad.adminGender = dr.GetString(2);
                    ad.adminDoB = dr.GetDateTime(3).ToShortDateString();
                    ad.adminEmailID = dr.GetString(4);
                    ad.imageAddress = dr.GetString(5);

                }
                // con.Close();
                return ad;
            }
            finally
            {
                con.Close();
            }

        }


        public bool updateAdminProfile(AdminModel model)
        {
            try
            {
                SqlCommand com_updateAdmin = new SqlCommand("update Admins set adminName=@name, adminGender=@gen, adminDoB=@dob, adminEmailID=@email where adminID =@id ", con);
                com_updateAdmin.Parameters.AddWithValue("@name", model.adminName);
                com_updateAdmin.Parameters.AddWithValue("@gen", model.adminGender);
                com_updateAdmin.Parameters.AddWithValue("@dob", model.adminDoB);
                com_updateAdmin.Parameters.AddWithValue("@email", model.adminEmailID);
                com_updateAdmin.Parameters.AddWithValue("@id", model.adminID);

                con.Open();
                if (com_updateAdmin.ExecuteNonQuery() == 1)
                {
                    //con.Close();
                    return true;
                }
                else
                {
                    //con.Close();
                    return false; ;
                }
            }
            finally
            {
                con.Close();
            }

        }




        ////////////////update password////////////////////////
        public bool updatePassword(int adminID, ChangePasswordAdmin c)
        {
            try
            {
                con.Open();
                MembershipUser user = Membership.GetUser(adminID.ToString());
                if (user.ChangePassword(c.oldPassword, c.newPassword))
                {
                    // user.ChangePasswordQuestionAndAnswer(c.newPassword, c.securityQuestion, c.securityAnswer);

                    SqlCommand com_updatePasswordStatus = new SqlCommand("update Admins set passwordStatus='Updated' where adminID=@aid", con);
                    com_updatePasswordStatus.Parameters.AddWithValue("@aid", adminID);
                    com_updatePasswordStatus.ExecuteNonQuery();
                    //  con.Close();


                    return true;
                }
                else
                {
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }



        ////////////////login////////////////////////
        public CheckPasswordStatusEnum login(LoginModel model)
        {
            try
            {
                if (Membership.ValidateUser(model.LogInId.ToString(), model.Password))
                {
                    if (checkAdminStatus(model))
                    {
                        //con.Close();
                        return CheckPasswordStatusEnum.Updated;
                    }
                    else
                    {
                        // con.Close();
                        return CheckPasswordStatusEnum.NewUser;
                    }
                }
                else
                {
                    // con.Close();
                    return CheckPasswordStatusEnum.WrongPassword;
                }
            }
            finally
            {
                //con.Close();
            }

        }

        public bool checkAdminStatus(LoginModel model)
        {
            try
            {
                SqlCommand com_check = new SqlCommand("select PasswordStatus from Admins where adminid=@aid", con);
                com_check.Parameters.AddWithValue("@aid", model.LogInId);
                con.Open();
                string passStatus = com_check.ExecuteScalar().ToString();
                if (passStatus == "AutoGenerated")
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            finally
            {
                con.Close();
            }
        }


        /////////////////////////// Forget Password/////////////////////////////////////
        public string forgetPasswordBySecurityAnswer(ForgetPasswordModel model)
        {
            try
            {
                con.Open();
                MembershipUser user = Membership.GetUser(model.adminID.ToString());

                try
                {
                    string password = user.ResetPassword(model.securityAnswer);
                    //string password = user.ResetPassword();
                    //con.Close();
                    return password;
                }
                catch
                {
                    //con.Close();
                    return null;
                }


            }
            finally
            {
                con.Close();
            }
        }



        public bool forgetPasswordToEmail(ForgetPasswordToEmailModel model)
        {
            try
            {
                SqlCommand com_getEmail = new SqlCommand("select adminEmailID from admins where adminID=@aid", con);
                com_getEmail.Parameters.AddWithValue("@aid", model.adminID);

                con.Open();
                object temp = com_getEmail.ExecuteScalar();
                string email;
                if (temp != null)
                {
                    email = temp.ToString();
                }

                else
                {
                    return false;
                }

                string newPassword = System.Web.Security.Membership.GeneratePassword(8, 3).ToUpper();

                MembershipUser usr = Membership.GetUser(model.adminID.ToString());
                string resetPwd = usr.ResetPassword();
                usr.ChangePassword(resetPwd, newPassword);


                //return email+" "+newPassword;







                var senderEmail = new MailAddress("developers.clinic@gmail.com", "Developers");
                var receiverEmail = new MailAddress(email, "User");

                var fromPassword = "AtaSouSub@123";
                var subject = "Reset Password";
                var body = "Your new password is -  " + newPassword + "\n Please reset your password";

                var smtp = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(senderEmail.Address, fromPassword)
                };

                using (var message = new MailMessage(senderEmail, receiverEmail)
                {
                    Subject = subject,
                    Body = body

                })
                {
                    smtp.Send(message);
                }


                return true;

            }
            finally
            {
                con.Close();
            }


        }

        ///////////Atanu////////////////////
        public String AddStaff(StaffModel sMod, int mID)
        {
            try
            {
                SqlCommand com_AddStaff = new SqlCommand("insert into Staffs(staffName,staffDOB,staffGender,StaffAddress,staffMobNo,staffEmail,staffStatus,staffJoiningDate,staffLeavingDate,ModifierID) values(@StName,@StDob,@StGender,@StAddress,@StMobNo,@StEmail,'Active',@StJoiDate,@StLeaDate,@mid)", con);
                com_AddStaff.Parameters.AddWithValue("@StName", sMod.StaffName);
                com_AddStaff.Parameters.AddWithValue("@StDob", sMod.dob);
                com_AddStaff.Parameters.AddWithValue("@StGender", sMod.StaffGender);
                com_AddStaff.Parameters.AddWithValue("@StAddress", sMod.StaffAddress);
                com_AddStaff.Parameters.AddWithValue("@StMobNo", sMod.StaffMobileNo);
                com_AddStaff.Parameters.AddWithValue("@StEmail", sMod.StaffEmailID);
                com_AddStaff.Parameters.AddWithValue("@StJoiDate", sMod.StJoiDate);
                com_AddStaff.Parameters.AddWithValue("@StLeaDate", "");
                com_AddStaff.Parameters.AddWithValue("@mid", mID);
                con.Open();
                int flag = Convert.ToInt32(com_AddStaff.ExecuteNonQuery());
                if (flag == 1)
                {
                    //con.Close();
                    return "Success";
                }
                else
                {
                    //con.Close();
                    return "Fail";
                }
            }
            finally
            {
                con.Close();
            }

        }

        public List<StaffModel> GetAllActiveStaff()
        {
            try
            {
                SqlCommand com_GetActiveStaff = new SqlCommand("select * from Staffs where staffStatus='Active'", con);
                con.Open();
                SqlDataReader dr = com_GetActiveStaff.ExecuteReader();
                List<StaffModel> sm = new List<StaffModel>();
                while (dr.Read())
                {
                    StaffModel Stm = new StaffModel();
                    Stm.Staffid = dr.GetInt32(0).ToString();
                    Stm.StaffName = dr.GetString(1);
                    Stm.dob = dr.GetDateTime(2).ToShortDateString();
                    Stm.StaffGender = dr.GetString(3);
                    Stm.StaffAddress = dr.GetString(4);
                    Stm.StaffMobileNo = dr.GetString(5);
                    Stm.StaffEmailID = dr.GetString(6);
                    Stm.StaffStatus = dr.GetString(7);
                    Stm.StJoiDate = dr.GetDateTime(8).ToShortDateString();
                    sm.Add(Stm);

                }
                // con.Close();
                return sm;
            }
            finally
            {
                con.Close();
            }
        }




        public List<StaffModel> GetAllInActiveStaff()
        {
            try
            {
                SqlCommand com_GetActiveStaff = new SqlCommand("select * from Staffs where staffStatus='Inactive'", con);
                con.Open();
                SqlDataReader dr = com_GetActiveStaff.ExecuteReader();
                List<StaffModel> sm = new List<StaffModel>();
                while (dr.Read())
                {
                    StaffModel Stm = new StaffModel();
                    Stm.Staffid = dr.GetInt32(0).ToString();
                    Stm.StaffName = dr.GetString(1);
                    Stm.dob = dr.GetDateTime(2).ToShortDateString();
                    Stm.StaffGender = dr.GetString(3);
                    Stm.StaffAddress = dr.GetString(4);
                    Stm.StaffMobileNo = dr.GetString(5);
                    Stm.StaffEmailID = dr.GetString(6);
                    Stm.StaffStatus = dr.GetString(7);
                    Stm.StJoiDate = dr.GetDateTime(8).ToShortDateString();
                    Stm.StLeaDate = dr.GetDateTime(9).ToShortDateString();

                    sm.Add(Stm);

                }
                //con.Close();
                return sm;
            }
            finally
            {
                con.Close();
            }
        }



        public StaffModel SearchStaff(int id)
        {
            try
            {
                SqlCommand com_SearchStaffById = new SqlCommand("Select * from Staffs where staffID=@id", con);
                com_SearchStaffById.Parameters.AddWithValue("@id", id);
                con.Open();
                SqlDataReader dr = com_SearchStaffById.ExecuteReader();
                StaffModel Stm = new StaffModel();
                if (dr.Read())
                {
                    Stm.Staffid = dr.GetInt32(0).ToString();
                    Stm.StaffName = dr.GetString(1);
                    Stm.dob = dr.GetDateTime(2).ToShortDateString();
                    Stm.StaffGender = dr.GetString(3);
                    Stm.StaffAddress = dr.GetString(4);
                    Stm.StaffMobileNo = dr.GetString(5);
                    Stm.StaffEmailID = dr.GetString(6);
                    Stm.StaffStatus = dr.GetString(7);
                    Stm.StJoiDate = dr.GetDateTime(8).ToShortDateString();
                    Stm.StLeaDate = dr.GetDateTime(9).ToShortDateString();
                    if (Stm.StaffStatus == "Active")
                    {
                        Stm.StLeaDate = "";
                    }


                }

                // con.Close();
                return Stm;
            }
            finally
            {
                con.Close();
            }
        }

        public string UpdateStaff(StaffModel sm, int mID)
        {
            try
            {
                SqlCommand com_UpdateStaff = new SqlCommand("update Staffs set staffName=@StName, staffDOB=@Stdob, staffGender=@StGender, staffAddress=@StAddr, staffMobNo=@StMobNo, staffEmail=@StEmail, staffStatus=@StStatus, staffJoiningDate=@StJoiDt, staffLeavingDate=@StleDate, ModifierID=@mid where staffID=@StId", con);
                com_UpdateStaff.Parameters.AddWithValue("@StId", sm.Staffid);
                com_UpdateStaff.Parameters.AddWithValue("@StName", sm.StaffName);
                com_UpdateStaff.Parameters.AddWithValue("@Stdob", sm.dob);
                com_UpdateStaff.Parameters.AddWithValue("@StGender", sm.StaffGender);
                com_UpdateStaff.Parameters.AddWithValue("@StAddr", sm.StaffAddress);
                com_UpdateStaff.Parameters.AddWithValue("@StMobNo", sm.StaffMobileNo);
                com_UpdateStaff.Parameters.AddWithValue("@StEmail", sm.StaffEmailID);
                com_UpdateStaff.Parameters.AddWithValue("@StStatus", sm.StaffStatus);
                com_UpdateStaff.Parameters.AddWithValue("@StJoiDt", sm.StJoiDate);
                com_UpdateStaff.Parameters.AddWithValue("@mid", mID);
                if (sm.StLeaDate == null || sm.StaffStatus == "Active")
                {
                    sm.StLeaDate = "";
                }
                com_UpdateStaff.Parameters.AddWithValue("@StleDate", sm.StLeaDate);
                con.Open();
                int i = com_UpdateStaff.ExecuteNonQuery();
                if (i == 1)
                {
                    return "Success";
                }
                else
                {
                    return "Fail";
                }
            }
            finally
            {
                con.Close();
            }
        }

        //public DataSet GetStaff(string prefix)
        //{
        //    SqlCommand Com_getAllStaff = new SqlCommand("select * from Staffs where staffName like @term+'%'",con);
        //    Com_getAllStaff.Parameters.AddWithValue("@term", prefix);
        //    DataSet ds = new DataSet();
        //    SqlDataAdapter da = new SqlDataAdapter(Com_getAllStaff);
        //    da.Fill(ds);
        //    return ds;

        //}

        //.............................24/10......................................//
        public string AddTest(AddTestModel AddT, int mID)
        {
            try
            {
                if (AddT.testSub_DeptName == null)
                {
                    AddT.testSub_DeptName = "";
                }

                SqlCommand com_addTest = new SqlCommand("insert into Tests values(@TName,@TDesc,@ImgAdd,@TSchedule,@did,@sdid,@mid)", con);
                com_addTest.Parameters.AddWithValue("@TName", AddT.TestName);
                com_addTest.Parameters.AddWithValue("@TDesc", AddT.TestDesc);
                com_addTest.Parameters.AddWithValue("@ImgAdd", "");
                com_addTest.Parameters.AddWithValue("@TSchedule", AddT.TestSchedule);
                com_addTest.Parameters.AddWithValue("@did", AddT.testDeptID);
                com_addTest.Parameters.AddWithValue("@sdid", AddT.testSub_DeptName);
                com_addTest.Parameters.AddWithValue("@mid", mID);
                con.Open();
                int count1 = com_addTest.ExecuteNonQuery();
                if (AddT.file != null)
                {
                    SqlCommand Com_getTestId = new SqlCommand("select @@identity", con);
                    AddT.TestId = Convert.ToInt32(Com_getTestId.ExecuteScalar());

                    string FileAddress = "/TestImages/" + AddT.TestId.ToString() + Path.GetExtension(AddT.file.FileName);
                    SqlCommand Com_UpdatePath = new SqlCommand("update Tests set imageAddress=@ImgPath where testID=@id", con);
                    Com_UpdatePath.Parameters.AddWithValue("@ImgPath", AddT.imageAddress);
                    Com_UpdatePath.Parameters.AddWithValue("@id", AddT.TestId);
                    int count2 = Com_UpdatePath.ExecuteNonQuery();

                    // con.Close();
                    return count1 + " " + count2;
                }
                else
                {
                    //SqlCommand Com_UpdatePath = new SqlCommand("update Tests set imageAddress='' where testID=@id", con);
                    //Com_UpdatePath.Parameters.AddWithValue("@id", AddT.TestId);
                    //int count2 = Com_UpdatePath.ExecuteNonQuery();
                    return count1 + "";
                }
            }
            finally
            {
                con.Close();
            }
        }






        //////////////////////////////////////vovo///////////////////////////////


        public List<AddTestModel> AllTests()
        {
            try
            {
                SqlCommand com_allTests = new SqlCommand("select testID,testName,testSchedule from Tests order by testID desc", con);
                con.Open();
                SqlDataReader dr = com_allTests.ExecuteReader();
                List<AddTestModel> list_allTests = new List<AddTestModel>();

                while (dr.Read())
                {
                    AddTestModel all = new AddTestModel();
                    all.TestId = dr.GetInt32(0);
                    all.TestName = dr.GetString(1);
                    all.TestSchedule = dr.GetString(2);
                    list_allTests.Add(all);
                }




                // con.Close();
                return list_allTests;
            }
            finally
            {
                con.Close();
            }
        }

        //////////////////////////////////////////// test details by id ////////////////////////////////////////

        public AddTestModel GetTestDetailsByID(int id)
        {
            try
            {
                SqlCommand com_getTestDetails = new SqlCommand("select * from Tests where testID=@tID", con);
                com_getTestDetails.Parameters.AddWithValue("@tID", id);
                con.Open();
                SqlDataReader dr = com_getTestDetails.ExecuteReader();
                AddTestModel details = new AddTestModel();
                while (dr.Read())
                {
                    details.TestId = dr.GetInt32(0);
                    details.TestName = dr.GetString(1);
                    details.TestDesc = dr.GetString(2);
                    details.imageAddress = dr.GetString(3);
                    details.TestSchedule = dr.GetString(4);
                    details.testDeptID = dr.GetInt32(5);
                    details.testSub_DeptName = dr.GetString(6);

                }


                // con.Close();
                return details;
            }
            finally
            {
                con.Close();
            }
        }

        // /////////////////////////////////// update test details ///////////////////////////////
        public bool UpdateTest(AddTestModel a_model, int mID)//, HttpPostedFileBase img)
        {
            try
            {
                if (a_model.imageAddress != null && a_model.imageAddress != "")
                {
                    //string imageAddress = "/TestImages/" + a_model.TestId.ToString() + Path.GetExtension(img.FileName);
                    SqlCommand com_updateTest = new SqlCommand("update Tests set testName=@tName, testDescription=@tDesc, imageAddress=@img, testSchedule=@tSchd, testDeptID=@did, testSub_DeptName=@sdid, ModifierID=@mid where testID=@tID", con);
                    con.Open();
                    com_updateTest.Parameters.AddWithValue("@tName", a_model.TestName);
                    com_updateTest.Parameters.AddWithValue("@tDesc", a_model.TestDesc);
                    com_updateTest.Parameters.AddWithValue("@img", a_model.imageAddress);
                    com_updateTest.Parameters.AddWithValue("@tSchd", a_model.TestSchedule);
                    com_updateTest.Parameters.AddWithValue("@did", a_model.testDeptID);
                    com_updateTest.Parameters.AddWithValue("@sdid", a_model.testSub_DeptName);
                    com_updateTest.Parameters.AddWithValue("@tID", a_model.TestId);
                    com_updateTest.Parameters.AddWithValue("@mid", mID);

                    if (com_updateTest.ExecuteNonQuery() == 1)
                    {
                        // con.Close();
                        return true;
                    }

                    // con.Close();
                    return false;
                }
                else
                {
                    SqlCommand com_updateTest = new SqlCommand("update Tests set testName=@tName, testDescription=@tDesc, imageAddress=@img, testSchedule=@tSchd, testDeptID=@did, testSub_DeptName=@sdid, ModifierID=@mid  where testID=@tID", con);
                    con.Open();
                    com_updateTest.Parameters.AddWithValue("@tName", a_model.TestName);
                    com_updateTest.Parameters.AddWithValue("@tDesc", a_model.TestDesc);
                    com_updateTest.Parameters.AddWithValue("@tSchd", a_model.TestSchedule);
                    com_updateTest.Parameters.AddWithValue("@tID", a_model.TestId);
                    com_updateTest.Parameters.AddWithValue("@did", a_model.testDeptID);
                    com_updateTest.Parameters.AddWithValue("@sdid", a_model.testSub_DeptName);
                    com_updateTest.Parameters.AddWithValue("@img", "");
                    com_updateTest.Parameters.AddWithValue("@mid", mID);

                    if (com_updateTest.ExecuteNonQuery() == 1)
                    {
                        //   con.Close();
                        return true;
                    }

                    // con.Close();
                    return false;
                }
            }
            finally
            {
                con.Close();
            }

        }



        //////////////////////////// souvik 24/10//////////////////////////////////////////
        public List<FeedbackModel> showAllFeedback()
        {
            try
            {
                SqlCommand com_showFeedback = new SqlCommand("select * from feedback", con);
                con.Open();
                SqlDataReader dr = com_showFeedback.ExecuteReader();
                List<FeedbackModel> list_feed = new List<FeedbackModel>();
                while (dr.Read())
                {
                    FeedbackModel model = new FeedbackModel();
                    model.feedbackID = dr.GetInt32(0);
                    model.name = dr.GetString(1);
                    model.contactNumber = dr.GetString(2);
                    model.feedbackMessage = dr.GetString(3);
                    model.feedbackStatus = dr.GetString(4);
                    list_feed.Add(model);
                }

                // con.Close();
                return list_feed;
            }
            finally
            {
                con.Close();
            }
        }



        public bool invisibleFeedback(int feedbackID)
        {
            try
            {
                SqlCommand com_inv = new SqlCommand("update Feedback set feedbackStatus='Invisible' where feedbackid=@fid", con);
                com_inv.Parameters.AddWithValue("@fid", feedbackID);
                con.Open();
                int count = com_inv.ExecuteNonQuery();
                //con.Close();

                if (count == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }



        public bool visibleFeedback(int feedbackID)
        {
            try
            {
                SqlCommand com_inv = new SqlCommand("update Feedback set feedbackStatus='Visible' where feedbackid=@fid", con);
                com_inv.Parameters.AddWithValue("@fid", feedbackID);
                con.Open();
                int count = com_inv.ExecuteNonQuery();
                //  con.Close();

                if (count == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }


        public List<SearchDoctorModel> SearchAllDoctors(string name)
        {
            try
            {
                List<SearchDoctorModel> list = new List<SearchDoctorModel>();
                SqlCommand com_searchAllDoctors;
                if (name == null)
                {
                    com_searchAllDoctors = new SqlCommand("select * from Doctors", con);
                    con.Open();
                    SqlDataReader dr = com_searchAllDoctors.ExecuteReader();

                    while (dr.Read())
                    {
                        SearchDoctorModel d_model = new SearchDoctorModel();
                        d_model.doctorID = dr.GetInt32(0);
                        d_model.doctorName = dr.GetString(1);
                        d_model.doctorDesignation = dr.GetString(2);
                        d_model.doctorSpeciality = dr.GetString(3);
                        d_model.doctorDegree = dr.GetString(4);
                        d_model.imageAddress = dr.GetString(5);
                        d_model.doctorStatus = dr.GetString(6);
                        list.Add(d_model);
                    }
                    //con.Close();
                    return list;


                }




                else
                {
                    com_searchAllDoctors = new SqlCommand("select * from Doctors where doctorName like @term+'%'", con);
                    com_searchAllDoctors.Parameters.AddWithValue("@term", name);
                    con.Open();
                    SqlDataReader dr = com_searchAllDoctors.ExecuteReader();

                    while (dr.Read())
                    {
                        SearchDoctorModel d_model = new SearchDoctorModel();
                        d_model.doctorID = dr.GetInt32(0);
                        d_model.doctorName = dr.GetString(1);
                        d_model.doctorDesignation = dr.GetString(2);
                        d_model.doctorSpeciality = dr.GetString(3);
                        d_model.doctorDegree = dr.GetString(4);
                        d_model.imageAddress = dr.GetString(5);
                        d_model.doctorStatus = dr.GetString(6);
                        list.Add(d_model);
                    }
                    con.Close();

                    return list;
                }
            }
            finally
            {
                con.Close();
            }
        }

        /*------------------------------1/11/17--------------------------*/
        public bool DeleteTestById(int id)
        {
            try
            {
                SqlCommand com_delTest = new SqlCommand("delete Tests where testID=@id ", con);
                com_delTest.Parameters.AddWithValue("@id", id);
                con.Open();
                int flag = com_delTest.ExecuteNonQuery();
                if (flag == 1)
                {
                    con.Close();
                    return true;
                }
                else
                {
                    con.Close();
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }

        public bool DeleteFeedbackById(int id)
        {
            try
            {
                SqlCommand com_delFeedback = new SqlCommand("delete Feedback where feedbackid=@id", con);
                com_delFeedback.Parameters.AddWithValue("@id", id);
                con.Open();
                int flag = com_delFeedback.ExecuteNonQuery();
                if (flag == 1)
                {
                    con.Close();
                    return true;
                }
                else
                {
                    con.Close();
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }



        ///////////////////////////////////////////////staff during a period/// souvik 31/10 /////////////////////////////
        public List<StaffModel> getAllStaffDuringAPeriod(StaffPeriodModel model)
        {
            try
            {
                SqlCommand com_GetStaff = new SqlCommand("select * from staffs where staffJoiningDate between @d1 and @d2", con);
                com_GetStaff.Parameters.AddWithValue("@d1", model.fromDate);
                com_GetStaff.Parameters.AddWithValue("@d2", model.toDate);
                con.Open();
                SqlDataReader dr = com_GetStaff.ExecuteReader();
                List<StaffModel> sm = new List<StaffModel>();
                while (dr.Read())
                {
                    StaffModel Stm = new StaffModel();
                    Stm.Staffid = dr.GetInt32(0).ToString();
                    Stm.StaffName = dr.GetString(1);
                    Stm.dob = dr.GetDateTime(2).ToShortDateString();
                    Stm.StaffGender = dr.GetString(3);
                    Stm.StaffAddress = dr.GetString(4);
                    Stm.StaffMobileNo = dr.GetString(5);
                    Stm.StaffEmailID = dr.GetString(6);
                    Stm.StaffStatus = dr.GetString(7);
                    Stm.StJoiDate = dr.GetDateTime(8).ToShortDateString();
                    Stm.StLeaDate = dr.GetDateTime(9).ToShortDateString();

                    if (Stm.StaffStatus == "Active")
                    {
                        Stm.StLeaDate = "";
                    }
                    sm.Add(Stm);

                }
                //con.Close();
                return sm;
            }
            finally
            {
                con.Close();
            }
        }


        //////////////////////////////////vik 4/2 ////////////////////////////////////
        public List<TestDepartmentsModel> getAllTestDepartments()
        {
            try
            {
                SqlCommand com_getDept = new SqlCommand("select testDeptID,testDeptName from TestDepartments", con);
                con.Open();
                SqlDataReader dr = com_getDept.ExecuteReader();
                List<TestDepartmentsModel> depts = new List<TestDepartmentsModel>();
                while (dr.Read())
                {
                    TestDepartmentsModel model = new TestDepartmentsModel();
                    model.testDeptID = dr.GetInt32(0);
                    model.testDeptName = dr.GetString(1);
                    depts.Add(model);
                }
                con.Close();
                return depts;
            }
            finally
            {
                con.Close();
            }
        }

        public List<TestSub_DepartmentsModel> getAllSubDept(int did)
        {
            try
            {
                SqlCommand com_getsub = new SqlCommand("select testSub_DeptID, testSub_DeptName, testDeptID from TestSub_Departments where testDeptID=@did", con);
                com_getsub.Parameters.AddWithValue("@did", did);

                con.Open();
                SqlDataReader dr = com_getsub.ExecuteReader();
                List<TestSub_DepartmentsModel> lst_sub = new List<TestSub_DepartmentsModel>();
                while (dr.Read())
                {
                    TestSub_DepartmentsModel model = new TestSub_DepartmentsModel();
                    model.testSub_DeptID = dr.GetInt32(0);
                    model.testSub_DeptName = dr.GetString(1);
                    model.testDeptID = dr.GetInt32(0);
                    lst_sub.Add(model);
                }
                con.Close();
                return lst_sub;
            }
            finally
            {
                con.Close();
            }
        }


        //champa 6 2
        public bool AddDepartment(TestDepartmentsModel model, int mID)
        {
            try
            {
                SqlCommand com_addDept = new SqlCommand("insert TestDepartments values(@deptname,@mID)", con);
                com_addDept.Parameters.AddWithValue("@deptname", model.testDeptName);
                com_addDept.Parameters.AddWithValue("mID", mID);
                con.Open();
                int i = com_addDept.ExecuteNonQuery();
                if (i == 1)
                {
                    con.Close();
                    return true;
                }
                con.Close();
                return false;
            }
            finally
            {
                con.Close();
            }
        }

        public bool DelDept(int id)
        {
            try
            {
                SqlCommand com_checksubdept = new SqlCommand("Select count(*) from TestSub_Departments where testDeptID=@id", con);
                com_checksubdept.Parameters.AddWithValue("@id", id);
                con.Open();
                int count = Convert.ToInt32(com_checksubdept.ExecuteScalar());
                if (count > 0)
                {
                    SqlCommand com_delsubdept = new SqlCommand("delete TestSub_Departments where testDeptID=@id", con);
                    com_delsubdept.Parameters.AddWithValue("@id", id);
                    int flag = com_delsubdept.ExecuteNonQuery();
                    if (flag == count)
                    {
                        SqlCommand com_deldept = new SqlCommand("delete TestDepartments where testDeptID=@id", con);
                        com_deldept.Parameters.AddWithValue("@id", id);
                        //con.Open();
                        int i = com_deldept.ExecuteNonQuery();
                        if (i == 1)
                        {
                            con.Close();
                            return true;
                        }
                        con.Close();
                        return false;
                    }
                    else
                    {
                        con.Close();
                        return false;
                    }

                }
                else
                {
                    SqlCommand com_deldept = new SqlCommand("delete TestDepartments where testDeptID=@id", con);
                    com_deldept.Parameters.AddWithValue("@id", id);
                    //con.Open();
                    int i = com_deldept.ExecuteNonQuery();
                    if (i == 1)
                    {
                        con.Close();
                        return true;
                    }
                    con.Close();
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }

        public string getDeptNameById(int id)
        {
            try
            {
                SqlCommand com_getDeptname = new SqlCommand("select testDeptName from TestDepartments where testDeptID=@id", con);
                com_getDeptname.Parameters.AddWithValue("@id", id);
                con.Open();
                string str = com_getDeptname.ExecuteScalar().ToString();
                con.Close();
                return str;
            }
            finally
            {
                con.Close();
            }
        }

        public bool AddSubDept(string DeptName, int id, int mID)
        {
            SqlCommand com_AddSubDept = new SqlCommand("insert TestSub_Departments values(@name,@deptid,@mid)", con);
            com_AddSubDept.Parameters.AddWithValue("@name", DeptName);
            com_AddSubDept.Parameters.AddWithValue("@deptid", id);
            com_AddSubDept.Parameters.AddWithValue("@mid", mID);
            con.Open();
            int i = com_AddSubDept.ExecuteNonQuery();
            if (i == 1)
            {
                con.Close();
                return true;
            }
            con.Close();
            return false;
        }

        public bool DelSubDept(int id)
        {
            try
            {
                SqlCommand com_delsubdept = new SqlCommand("delete TestSub_Departments where testSub_DeptID=@id", con);
                com_delsubdept.Parameters.AddWithValue("@id", id);
                con.Open();
                int i = com_delsubdept.ExecuteNonQuery();
                if (i == 1)
                {
                    con.Close();
                    return true;
                }
                con.Close();
                return false;
            }
            finally
            {
                con.Close();
            }
        }


        public bool addWorkingDayofDoctor(string days, int did, int modifierID)
        {
            try
            {
                //SqlCommand com_addDay = new SqlCommand("update Doctors set DoctorWorkingday=@day where doctorID=@did", con);
                //com_addDay.Parameters.AddWithValue("@day", days);
                //com_addDay.Parameters.AddWithValue("@did", did);

                //con.Open();
                //int c= com_addDay.ExecuteNonQuery();
                //con.Close();
                //if (c == 1)
                //    return true;
                //else
                //    return false;
                string m = "N", tu = "N", w = "N", th = "N", f = "N", sat = "N", sun = "N";
                string[] arr = days.Split(',');
                foreach (string str in arr)
                {
                    if (str == "Monday")
                        m = "Y";
                    else if (str == "Tuesday")
                        tu = "Y";
                    else if (str == "Wednesday")
                        w = "Y";
                    else if (str == "Thursday")
                        th = "Y";
                    else if (str == "Friday")
                        f = "Y";
                    else if (str == "Saturday")
                        sat = "Y";
                    else if (str == "Sunday")
                        sun = "Y";
                }



                SqlCommand com_checkDoc = new SqlCommand("select count(*) from DoctorWorkingDays where doctorID=@did", con);
                com_checkDoc.Parameters.AddWithValue("@did", did);
                con.Open();

                if (Convert.ToInt32(com_checkDoc.ExecuteScalar()) == 1)
                {
                    SqlCommand com_addDay = new SqlCommand("update DoctorWorkingDays set Monday=@m,Tuesday=@t,Wednesday=@w,Thursday=@th,Friday=@f,Saturday=@sat,Sunday=@sun,ModifierID=@mID where doctorID=@did", con);
                    //com_addDay.Parameters.AddWithValue("@day", days);
                    com_addDay.Parameters.AddWithValue("@did", did);
                    com_addDay.Parameters.AddWithValue("@m", m);
                    com_addDay.Parameters.AddWithValue("@t", tu);
                    com_addDay.Parameters.AddWithValue("@w", w);
                    com_addDay.Parameters.AddWithValue("@th", th);
                    com_addDay.Parameters.AddWithValue("@f", f);
                    com_addDay.Parameters.AddWithValue("@sat", sat);
                    com_addDay.Parameters.AddWithValue("@sun", sun);
                    com_addDay.Parameters.AddWithValue("@mID", modifierID);


                    // con.Open();
                    int c = com_addDay.ExecuteNonQuery();
                    con.Close();
                    if (c == 1)
                        return true;
                    else
                        return false;
                }
                else
                {
                    SqlCommand com_addDay = new SqlCommand("insert DoctorWorkingDays values(@did,@m,@t,@w,@th,@f,@sat,@sun,@mID)", con);
                    com_addDay.Parameters.AddWithValue("@did", did);
                    com_addDay.Parameters.AddWithValue("@m", m);
                    com_addDay.Parameters.AddWithValue("@t", tu);
                    com_addDay.Parameters.AddWithValue("@w", w);
                    com_addDay.Parameters.AddWithValue("@th", th);
                    com_addDay.Parameters.AddWithValue("@f", f);
                    com_addDay.Parameters.AddWithValue("@sat", sat);
                    com_addDay.Parameters.AddWithValue("@sun", sun);
                    com_addDay.Parameters.AddWithValue("@mID", modifierID);
                    //con.Open();

                    int c = com_addDay.ExecuteNonQuery();
                    con.Close();
                    if (c == 1)
                        return true;
                    else
                        return false;

                }
            }
            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// subha 22/02/18
        /// </summary>
        /// <param name="testDepartmentsModel"></param>
        /// <returns></returns>
        public bool checkDuplicateDepartment(TestDepartmentsModel testDepartmentsModel)
        {
            try
            {
                SqlCommand com_checkDept = new SqlCommand("select count(*) from TestDepartments where testDeptName=@dName", con);
                com_checkDept.Parameters.AddWithValue("@dName", testDepartmentsModel.testDeptName);
                con.Open();
                int i = Convert.ToInt32(com_checkDept.ExecuteScalar());
                con.Close();
                if (i > 0)
                {
                    return true;
                }
                return false;
            }
            finally
            {
                con.Close();
            }

        }

        public bool checkDuplicateSubDepartment(TestSub_DepartmentsModel testsubDepartmentsModel)
        {
            try
            {
                SqlCommand com_checkDept = new SqlCommand("select count(*) from TestSub_Departments where testSub_DeptName=@dName", con);
                com_checkDept.Parameters.AddWithValue("@dName", testsubDepartmentsModel.testSub_DeptName);
                con.Open();
                int i = Convert.ToInt32(com_checkDept.ExecuteScalar());
                con.Close();
                if (i > 0)
                {
                    return true;
                }
                return false;
            }
            finally
            {
                con.Close();
            }

        }

        //vik 24/02
        public List<string> getWorkingDays(int docID)
        {
            try
            {
                SqlCommand com_w = new SqlCommand("select * from DoctorWorkingDays where doctorID=@did", con);
                com_w.Parameters.AddWithValue("@did", docID);

                con.Open();
                SqlDataReader dr = com_w.ExecuteReader();
                List<string> lst_wDays = new List<string>();
                string str;
                if (dr.Read())
                {
                    str = dr.GetString(1);
                    if (str == "Y")
                        lst_wDays.Add("Monday");

                    str = dr.GetString(2);
                    if (str == "Y")
                        lst_wDays.Add("Tuesday");

                    str = dr.GetString(3);
                    if (str == "Y")
                        lst_wDays.Add("Wednesday");

                    str = dr.GetString(4);
                    if (str == "Y")
                        lst_wDays.Add("Thursday");

                    str = dr.GetString(5);
                    if (str == "Y")
                        lst_wDays.Add("Friday");

                    str = dr.GetString(6);
                    if (str == "Y")
                        lst_wDays.Add("Saturday");

                    str = dr.GetString(7);
                    if (str == "Y")
                        lst_wDays.Add("Sunday");
                }
                con.Close();

                return lst_wDays;
            }
            finally
            {
                con.Close();
            }
        }

        public bool checkOldPassword(string userID, string sPassword)
        {

            if (Membership.ValidateUser(userID, sPassword))
            {
                return true;
            }
            return false;
        }





        /////////////////Atanu Log Login details code 16/09/18 //////////////////
        /////////////////Atanu Log Login details code 16/09 //////////////////
        public bool LogLoginDetails(Mvc_Clinic.Models.LoginLogModel model)
        {
            try
            {
                int i = 0;
                using (SqlCommand com_LogLogin = new SqlCommand())
                {
                    com_LogLogin.CommandType = System.Data.CommandType.StoredProcedure;
                    com_LogLogin.CommandText = "SP_ErrorandLoginLogDetails";
                    com_LogLogin.Connection = con;
                    com_LogLogin.Parameters.AddWithValue("@ch", model.Choice);
                    com_LogLogin.Parameters.AddWithValue("@adminID", model.LoginID);
                    com_LogLogin.Parameters.AddWithValue("@ipAddress", model.Ipaddress);
                    com_LogLogin.Parameters.AddWithValue("@Exception", "");
                    con.Open();
                    i = com_LogLogin.ExecuteNonQuery();
                    con.Close();
                }

                return i > 0 ? true : false;
            }
            finally
            {
                con.Close();

            }

        }


        public bool LogException(FailedEventLogModel model)
        {
            try
            {

                int i = 0;
                using (SqlCommand com_LogException = new SqlCommand())
                {
                    com_LogException.CommandType = System.Data.CommandType.StoredProcedure;
                    com_LogException.CommandText = "SP_ErrorandLoginLogDetails";
                    com_LogException.Connection = con;
                    com_LogException.Parameters.AddWithValue("@ch", model.Choice);
                    com_LogException.Parameters.AddWithValue("@adminID", model.AdminID);
                    com_LogException.Parameters.AddWithValue("@ipAddress", string.Empty);
                    com_LogException.Parameters.AddWithValue("@Exception", model.ExceptionStacktrace);
                    con.Open();
                    i = com_LogException.ExecuteNonQuery();
                    con.Close();
                }

                return i > 0 ? true : false;
            }
            finally
            {
                con.Close();

            }
        }
    }

}
